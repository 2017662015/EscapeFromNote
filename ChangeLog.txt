#ChangeLog of EscapeFromNote

[2018-05-25 22:52] Build Log #1
	1. Add PlayerMovementTest Scene.
	2. Add Prefab named Player.
	3. Add Character.cs as Abstract Class at \Scripts\Character\Abstract
		- Add Enum named BehaviourState for State Machine of Characters
			=> State List : NULL, INIT, IDLE, MOVE, ATTACK, SKILL, DAMAGED, DIE, GO_TO_NEXT_STAGE, FINALIZE
		- Add Instance named checkState for IEnumerator CheckState
		- Add Variable named hp(int), moveSpeed, currentState, previousState;
		- Add Internal Getter method of currentState;
		- Add Virtual method of Unity Callback Method, named OnCollisionEnter2D
		- Add Virtual method named Init, whtch contains initialize procedure of class and state machine
			
	4. Add PlayerInf.cs as Component at \Scripts\Character\Player
		- Add Logics for Eraser as Weapon
			- Now Player can get Erasers as many as variable named 'eraserSpaceCount' with hitting a GameObject which has a tag named 'Item_Eraser'
			- Now Player can get only one White item with waiting 30 seconds
			- Now Player get One Eraser when game starts
			- Now Position of erasers are formatted by count of eraser
			
[2018-05-26 02:11] Build Log #2
	1. Add Manager.cs as Abstract Class at \Scripts\Management\Abstract
		- Add Singleton Management Logic
		- Add Screen Resolution Information for NGUI Coordinate System
	2. Add GameManagement.cs at \Scripts\Management
		- Implement State Machine for managing the lifecycle of game

[2018-05-26 15:52] Build Log #3
	1. Add StageManagement.cs at \Scripts\Managment
		- Now StageManagement are controlled by GameManagement
	2. Edit GameManagement.cs
		- Fix GameManager Object isn't started with DontDestroyOnLoad
		
[2018-05-26 23:41] Build Log #4
	1. Known Bug #1 - DontDestroyOnLoad Scene Doesn't be builded by Gradle Builder on Unity 2018.1.0f2
	2. Edit GameManagement.cs
		- Now GameMangement spawns Walls and Background on GameState.INIT_PLAY
		- Add GameState.BACK_TO_TITLE at GameState Enum and Add OnBackToTitle Method as State Machine Callback Method
		- Now GameManagement controls PlayerManagement with GameState
	3. Add PlayerManagement.cs
		- Add SpawnPlayer Method and DestroyMethod to spawn and destroy player in the world
		- If player is in the world, PlayerMove Component is controlled by PlayerManagement
	4. Edit Manager.cs
		- Now Components which is child of Manager get current screen information with GetScreen[Type] Method
	5. Add PlayerMove.cs
		- New Controll System : Adoptive Controller
		
[2018-05-27 00:58] Build Log #5
	1. Bug Fixed - Glitch on Adoptive Controller
	
[2018-05-27 03:24] Build Log #6
	1. Edit PlayerMove.cs
		- Fix Player Controller Size as 100Øpx
		- Now Player's speed is dynamic according to controller's position
		- moveSpeed variable is serialized so director can change the value on the editor
	2. Edit GameManagement.cs
		- Now GameManager won't go GameState.PLAY stage itself, because of delay after spawning player.
	3. Edit PlayerManagement.cs
		- Now PlayerManagement set currentState of GameManagement as GameState.PLAY after waiting 4 seconds after player spawned.
	4. Edit PlayerInf.cs
		- Fixed CheckState Method.
		
[2018-05-29 06:34] Build Log #7
	1. Edit Manager.cs
		- Bug Fixed : Fixed IndexOutOfRangeException at Manager.cs:57 on Android Experimal Build
		- Delected All allocated method/variables with UnityEngine.Screen.Resoulution(Doesn't Support on Android)
	2. Edit PlayerMove.cs
		- Add UI for Adoptive Controller(Texture Not Set)
		- Convert Moving Logic(Transform.position to Rigidbody2D.position for performance)
		- Increase Area Radius of Adoptive Controller to 150.0Øpx
		- Convert Finger Coordinate Vector3 Variables to Vector2
		- Synchronized Timeline of GetInput and MovePlayer.
	3. Edit PlayerInf.cs
		- Re-Schedule State of Player
		- Now GameManagement.currentState goes GameState.GameOver when Player Die and Finalize itself's Lifecycle.
	4. Add EnemyBehaviour.cs
		- Inherited Character.cs
		- Support Multi Bullet Fire Position and Dynamic Bullet Object Pool
		- Add Player Auto-Targeting System
	5. Add PencilMove.cs, BallPenMove.cs, FountainPenMove.cs For Enemy
		- Inherited EnemyBehaviour.cs
	6. Add EnemyTest.Scene
		- Construct the scene for testing enemy(Postive & Event Test)

[2018-05-30 08:26] Build Log #8
	1. Add Item_PencilCase, Item_Eraser Prefabs
		- Add ItemPencilCaseConfig.cs for Item_PencilCase
		- Add ItemEraserConfig.cs for Item_Eraser
		- Now Player can get these items from OnTriggerEnter()
	2. Add BulletBehaviour.cs
		- Add Reflection Logic for gameplay.
		- Spawned bullet will be disappear after BULLET_LIFE_TIME constant(Default value : 10.0f)
		- CircleCollider2D of bullet will be triggered when collide with Player and Enemy
	3. Edit EnemyBehaviour.cs
		- Now Enemy Shoots the bullets which are already counted.
	4. A lot of minor issue fixed.(almost 50+)