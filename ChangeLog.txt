#ChangeLog of EscapeFromNote

[2018-05-25 22:52] Build Log #1
	1. Add PlayerMovementTest Scene.
	2. Add Prefab named Player.
	3. Add Character.cs as Abstract Class at \Scripts\Character\Abstract
		- Add Enum named BehaviourState for State Machine of Characters
			=> State List : NULL, INIT, IDLE, MOVE, ATTACK, SKILL, DAMAGED, DIE, GO_TO_NEXT_STAGE, FINALIZE
		- Add Instance named checkState for IEnumerator CheckState
		- Add Variable named hp(int), moveSpeed, currentState, previousState;
		- Add Internal Getter method of currentState;
		- Add Virtual method of Unity Callback Method, named OnCollisionEnter2D
		- Add Virtual method named Init, whtch contains initialize procedure of class and state machine
			
	4. Add PlayerInf.cs as Component at \Scripts\Character\Player
		- Add Logics for Eraser as Weapon
			- Now Player can get Erasers as many as variable named 'eraserSpaceCount' with hitting a GameObject which has a tag named 'Item_Eraser'
			- Now Player can get only one White item with waiting 30 seconds
			- Now Player get One Eraser when game starts
			- Now Position of erasers are formatted by count of eraser
			
[2018-05-26 02:11] Build Log #2
	1. Add Manager.cs as Abstract Class at \Scripts\Management\Abstract
		- Add Singleton Management Logic
		- Add Screen Resolution Information for NGUI Coordinate System
	2. Add GameManagement.cs at \Scripts\Management
		- Implement State Machine for managing the lifecycle of game

[2018-05-26 15:52] Build Log #3
	1. Add StageManagement.cs at \Scripts\Managment
		- Now StageManagement are controlled by GameManagement
	2. Edit GameManagement.cs
		- Fix GameManager Object isn't started with DontDestroyOnLoad
		
[2018-05-26 23:41] Build Log #4
	1. Known Bug #1 - DontDestroyOnLoad Scene Doesn't be builded by Gradle Builder on Unity 2018.1.0f2
	2. Edit GameManagement.cs
		- Now GameMangement spawns Walls and Background on GameState.INIT_PLAY
		- Add GameState.BACK_TO_TITLE at GameState Enum and Add OnBackToTitle Method as State Machine Callback Method
		- Now GameManagement controls PlayerManagement with GameState
	3. Add PlayerManagement.cs
		- Add SpawnPlayer Method and DestroyMethod to spawn and destroy player in the world
		- If player is in the world, PlayerMove Component is controlled by PlayerManagement
	4. Edit Manager.cs
		- Now Components which is child of Manager get current screen information with GetScreen[Type] Method
	5. Add PlayerMove.cs
		- New Controll System : Adoptive Controller